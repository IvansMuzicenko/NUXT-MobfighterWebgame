// Display value list
$displays: none, block, flex, grid, inline, inline-block, inline-flex,
  inline-grid;

$positions: (
  static,
  relative,
  absolute,
  fixed,
  sticky,
  inherit,
  initial,
  revert,
  unset
);

$locations: (left, top, right, bottom);

$flexes: (
  justify-self: (
    auto,
    normal,
    stretch,
    center,
    start,
    end,
    flex-start,
    flex-end,
    self-start,
    self-end,
    left,
    right,
    baseline,
    inherit,
    initial,
    revert,
    unset,
  ),
  justify-items: (
    auto,
    normal,
    stretch,
    center,
    start,
    end,
    flex-start,
    flex-end,
    self-start,
    self-end,
    left,
    right,
    baseline,
    inherit,
    initial,
    revert,
    unset,
  ),
  justify-content: (
    center,
    start,
    end,
    flex-start,
    flex-end,
    left,
    right,
    normal,
    space-between,
    space-around,
    space-evenly,
    stretch,
    inherit,
    initial,
    revert,
    unset,
  ),
  align-content: (
    center,
    start,
    end,
    flex-start,
    flex-end,
    normal,
    baseline,
    space-between,
    space-around,
    space-evenly,
    stretch,
    inherit,
    initial,
    revert,
    unset,
  ),
  align-items: (
    normal,
    stretch,
    center,
    start,
    end,
    flex-start,
    flex-end,
    baseline,
    inherit,
    initial,
    revert,
    unset,
  ),
  align-self: (
    auto,
    normal,
    center,
    start,
    end,
    self-start,
    self-end,
    flex-start,
    flex-end,
    baseline,
    stretch,
    inherit,
    initial,
    revert,
    unset,
  ),
);

//Responsive sizes list
$size-units: (
  'rem': 1,
  'pr': 5,
  'vh': 5,
  'vw': 5,
);
// List of keywords for classes
$keywords: (
  w: width,
  h: height,
  p: padding,
  px: (
    padding-left,
    padding-right,
  ),
  py: (
    padding-top,
    padding-bottom,
  ),
  pl: padding-left,
  pt: padding-top,
  pr: padding-right,
  pb: padding-bottom,
  m: margin,
  mx: (
    margin-left,
    margin-right,
  ),
  my: (
    margin-top,
    margin-bottom,
  ),
  ml: margin-left,
  mt: margin-top,
  mr: margin-right,
  mb: margin-bottom,
);

// List of breakpoints sizes for responsivity
$breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px,
);

// Variables for mutations
$unitsign: '';
$step: null;
$argname: null;

//Function for position classes creation like: pos-relative-md
@each $position in $positions {
  .pos-#{$position} {
    position: #{$position};
  }
  @each $name, $size in $breakpoints {
    @media screen and (min-width: $size) {
      .pos-#{$position}-#{$name} {
        position: #{$position};
      }
    }
  }
}
// Function for location classes creation like: top-25
@each $location in $locations {
  @for $i from 0 to 5 {
    .#{$location}-#{$i * 25} {
      #{$location}: #{$i * 25 + '%'};
    }
    @each $name, $size in $breakpoints {
      @media screen and (min-width: $size) {
        .#{$location}-#{$i * 25}-#{$name} {
          #{$location}: #{$i * 25 + '%'};
        }
      }
    }
  }
}

// Function for flex classes creation like: align-content-space-between-lg
@each $flex, $args in $flexes {
  @each $arg in $args {
    $argname: $arg;
    @if $argname == space-between {
      $argname: between;
    }
    @if $argname == space-around {
      $argname: around;
    }
    @if $argname == space-evenly {
      $argname: evenly;
    }
    .#{$flex}-#{$argname} {
      #{$flex}: #{$arg};
    }
    @each $name, $size in $breakpoints {
      @media screen and (min-width: $size) {
        .#{$flex}-#{$argname}-#{$name} {
          #{$flex}: #{$arg};
        }
      }
    }
  }
}

// Function for display classes creation like: .d-flex
@each $display in $displays {
  .d-#{$display} {
    display: #{$display};
  }
  @each $name, $size in $breakpoints {
    @media screen and (min-width: $size) {
      .d-#{$display}-#{$name} {
        display: #{$display};
      }
    }
  }
}
// Function for margin, padding, sizes classes creation like: .px-12-lg
@each $option, $fullnames in $keywords {
  // Auto value for classes
  .#{$option}-auto {
    @each $fullname in $fullnames {
      #{$fullname}: auto;
    }
  }
  @each $name, $size in $breakpoints {
    @media screen and (min-width: $size) {
      .#{$option}-auto-#{$name} {
        @each $fullname in $fullnames {
          #{$fullname}: auto;
        }
      }
    }
  }
  //
  @each $unit, $stepint in $size-units {
    $step: $stepint;
    $unitsign: $unit;
    @if $unit == 'rem' {
      $unitsign: $unit;
      $unit: '';
      $step: $stepint * 0.5;
    }
    @if $unit == 'pr' {
      $unitsign: '%';
    }

    @for $i from 0 through 20 {
      .#{$option}-#{$i * $stepint}#{$unit} {
        @each $fullname in $fullnames {
          #{$fullname}: #{$i * $step + $unitsign};
        }
      }
    }

    @each $name, $size in $breakpoints {
      @media screen and (min-width: $size) {
        @for $i from 0 through 20 {
          .#{$option}-#{$i * $stepint}#{$unit}-#{$name} {
            @each $fullname in $fullnames {
              #{$fullname}: #{$i * $step + $unitsign};
            }
          }
        }
      }
    }
  }
}
